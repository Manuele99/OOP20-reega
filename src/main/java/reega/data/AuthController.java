package reega.data;

import java.io.IOException;
import java.sql.SQLException;

import reega.data.models.UserAuth;
import reega.users.GenericUser;
import reega.users.NewUser;

public interface AuthController {
	/**
	 * Add user to REEGA platform
	 * 
	 * @param newUser
	 * @throws SQLException
	 */
	public void addUser(NewUser newUser) throws SQLException;

	/**
	 * Login using email and password
	 * 
	 * @param email
	 * @param hash  the password's hash generated by AES.encrypt method
	 * @return the user if login succeeded or null if email not found or wrong
	 *         password
	 * @throws SQLException
	 * @See GenericUser
	 */
	public GenericUser emailLogin(String email, String hash) throws SQLException;

	/**
	 * Login using fiscal code and password
	 * 
	 * @param fiscalCode ths user's fiscal code
	 * @param hash       the password's hash generated by AES.encrypt method
	 * @return the user if login succeeded or null if fiscal code not found or wrong
	 *         password
	 * @throws SQLException
	 */
	public GenericUser fiscalCodeLogin(String fiscalCode, String hash) throws SQLException;

	/**
	 * Login using the credentials locally stored
	 * 
	 * @param credentials
	 * @return
	 */
	public GenericUser tokenLogin(UserAuth credentials) throws SQLException;

	/**
	 * Store selector and validator to enable the remind-me functionality
	 * 
	 * @param userID    the user ID
	 * @param selector  random aphanumrical string up to 12 characters
	 * @param validator SHA256 encryption of a random alphanumerical string (64
	 *                  characters)
	 * @throws IOException
	 * @throws SQLException
	 */
	public void storeUserCredentials(int userID, String selector, String validator) throws SQLException, IOException;

	/**
	 * Remove selector and validator of the user from the DB. The user must prompt
	 * in the credentials again to login
	 * 
	 * @param userID
	 * @throws SQLException
	 */
	public void userLogout(int userID) throws SQLException;
}
