package reega.data;

import reega.data.models.UserAuth;
import reega.users.GenericUser;
import reega.users.NewUser;

import java.io.IOException;

/**
 * This controller handles all the operations on users and authentication
 */
public interface AuthController {
    /**
     * Add user to REEGA platform
     *
     * @param newUser
     */
    void addUser(NewUser newUser) throws IOException;

    /**
     * Remove user from REEGA platform
     *
     * @param fiscalCode
     * @throws IOException
     */
    void removeUser(String fiscalCode) throws IOException;

    /**
     * Login using email and password
     *
     * @param email
     * @param password the password's hash generated by AES.encrypt method
     * @return the user if login succeeded or null if email not found or wrong password
     * @See GenericUser
     */
    GenericUser emailLogin(String email, String password) throws IOException;

    /**
     * Login using fiscal code and password
     *
     * @param fiscalCode ths user's fiscal code
     * @param password   the password's hash generated by AES.encrypt method
     * @return the user if login succeeded or null if fiscal code not found or wrong password
     */
    GenericUser fiscalCodeLogin(String fiscalCode, String password) throws IOException;

    /**
     * Login using the credentials locally stored
     *
     * @param credentials
     * @return
     */
    GenericUser tokenLogin(UserAuth credentials) throws IOException;

    /**
     * Store selector and validator to enable the remind-me functionality
     *
     * @param selector  random aphanumrical string up to 12 characters
     * @param validator SHA256 encryption of a random alphanumerical string (64 characters)
     * @throws IOException
     */
    void storeUserCredentials(String selector, String validator) throws IOException;

    /**
     * Remove selector and validator of the user from the DB. The user must prompt in the credentials again to login
     */
    void userLogout() throws IOException;
}
